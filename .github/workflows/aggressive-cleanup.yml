name: Aggressive Cleanup
on:
  workflow_dispatch:

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run aggressive cleanup
        run: |
          cat > aggressive-cleanup.js << 'EOL'
          import { readFileSync, writeFileSync } from 'fs';
          import { join } from 'path';
          import { fileURLToPath } from 'url';

          const __dirname = fileURLToPath(new URL('.', import.meta.url));
          const dataPath = join(process.cwd(), 'data', 'gossip_data.json');

          console.log('Starting aggressive cleanup...');

          try {
              const data = JSON.parse(readFileSync(dataPath, 'utf8'));
              const fileSizeBefore = Buffer.byteLength(JSON.stringify(data)) / (1024 * 1024);
              console.log(`File size before cleanup: ${fileSizeBefore.toFixed(2)} MB`);
              console.log(`Original entries count: ${data.entries?.length || 0}`);
              console.log(`Original fallback entries count: ${data.fallback_entries?.length || 0}`);

              // Store drama scores
              const dramaScores = new Map();
              if (data.entries) {
                  data.entries.forEach(entry => {
                      if (entry.dramaScore) {
                          dramaScores.set(entry.url, entry.dramaScore);
                      }
                  });
              }

              // Set 7-day window
              const now = new Date();
              const oneWeekAgo = new Date(now - 7 * 24 * 60 * 60 * 1000);

              console.log(`Filtering entries older than ${oneWeekAgo.toISOString()}`);

              // Filter entries with strict date checking
              const oldEntries = (data.entries || []).filter(entry => {
                  const entryDate = new Date(entry.published);
                  return entryDate <= oneWeekAgo;
              });

              data.entries = (data.entries || []).filter(entry => {
                  const entryDate = new Date(entry.published);
                  return entryDate > oneWeekAgo;
              });

              // Filter fallback entries
              const oldFallbackEntries = (data.fallback_entries || []).filter(entry => {
                  const entryDate = new Date(entry.published);
                  return entryDate <= oneWeekAgo;
              });

              data.fallback_entries = (data.fallback_entries || []).filter(entry => {
                  const entryDate = new Date(entry.published);
                  return entryDate > oneWeekAgo;
              });

              // Restore drama scores
              data.entries.forEach(entry => {
                  if (dramaScores.has(entry.url)) {
                      entry.dramaScore = dramaScores.get(entry.url);
                  }
              });

              // Log removed entries details
              console.log('\nRemoved entries dates:');
              oldEntries.slice(0, 5).forEach(entry => {
                  console.log(`- ${entry.published}: ${entry.title}`);
              });

              const fileSizeAfter = Buffer.byteLength(JSON.stringify(data)) / (1024 * 1024);

              console.log('\nCleanup Summary:');
              console.log(`- Removed main entries: ${oldEntries.length}`);
              console.log(`- Removed fallback entries: ${oldFallbackEntries.length}`);
              console.log(`- Remaining main entries: ${data.entries.length}`);
              console.log(`- Remaining fallback entries: ${data.fallback_entries.length}`);
              console.log(`- Preserved drama scores: ${dramaScores.size}`);
              console.log(`- File size before: ${fileSizeBefore.toFixed(2)} MB`);
              console.log(`- File size after: ${fileSizeAfter.toFixed(2)} MB`);
              console.log(`- Size reduction: ${((fileSizeBefore - fileSizeAfter).toFixed(2))} MB`);

              writeFileSync(dataPath, JSON.stringify(data, null, 2));

          } catch (error) {
              console.error('Error during cleanup:', error);
              process.exit(1);
          }
          EOL
          node aggressive-cleanup.js

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/gossip_data.json
          git diff --staged --quiet || git commit -m "Aggressive cleanup - remove entries older than 1 week"
          git push
